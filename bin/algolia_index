#!/usr/bin/env ruby
# frozen_string_literal: true

# Parse HAML files and index component content to Algolia

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'optparse'
require 'fileutils'
require 'json'

begin
  # Parse command line options
  options = { debug: false }
  
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: bin/algolia_index [options] [file_path]"
    
    opts.on("-d", "--debug", "Enable debug output") do
      options[:debug] = true
    end
    
    opts.on("-h", "--help", "Show this help message") do
      puts opts
      exit
    end
  end
  
  parser.parse!
  
  # Set debug environment variable if requested
  ENV['DEBUG'] = 'true' if options[:debug]
  debug = options[:debug]
  
  # Get the file path from command line arguments (if any)
  file_path = ARGV[0]
  
  # Required for all operations
  require 'loco_motion/algolia/haml_parser_service'
  require 'loco_motion/algolia/algolia_import_service'
  
  # Print intro message
  if file_path
    if File.exist?(file_path)
      puts "Processing single file: #{file_path}"
    else
      puts "Error: File not found: #{file_path}"
      exit 1
    end
  else
    puts "No file specified. Processing all components..."
    # These are only needed when processing all components
    require 'loco_motion/algolia/client'
    require 'loco_motion/algolia/component_indexer' 
    require 'loco_motion/algolia/documentation_extractor'
    require 'loco_motion/algolia/search_record_builder'
    
    # We need LocoMotion::COMPONENTS for the full indexing
    if !defined?(LocoMotion) || !defined?(LocoMotion::COMPONENTS)
      puts "Error: LocoMotion::COMPONENTS not defined."
      puts "This operation requires the Rails environment. Try using:"
      puts "  RAILS_ENV=development bin/rails runner bin/algolia_index"
      exit 1
    end
  end
  
  # Check for Algolia credentials
  application_id = ENV['ALGOLIA_APPLICATION_ID']
  api_key = ENV['ALGOLIA_API_KEY']
  has_credentials = application_id && api_key && !application_id.empty? && !api_key.empty?
  
  if has_credentials
    puts "Algolia credentials found. Will upload data to Algolia."
    # Initialize Algolia client for the full component indexing case
    if !file_path
      require 'loco_motion/algolia/client'
      client = LocoMotion::Algolia::Client.new
      index = client.index('components')
    end
  else
    puts "No Algolia credentials found. Will generate JSON file only."
  end
  
  if file_path
    # Single file processing
    # Display file contents in debug mode
    if debug
      puts "\nFile contents:"
      puts File.read(file_path)
      puts "End of file contents\n"
    end
    
    # Parse the file
    parser = LocoMotion::Algolia::HamlParserService.new(file_path, debug)
    result = parser.parse
    
    # Process with AlgoliaImportService
    import_service = LocoMotion::Algolia::AlgoliaImportService.new(debug: debug)
    import_service.process(result, file_path)
    
    # Output parsing result
    if debug
      puts "\n# Result from parsing #{file_path}:\n"
      require 'pp'
      pp result
    else
      # Output as a pretty-formatted JSON string
      puts JSON.pretty_generate(result)
    end
  else
    # Process all components
    puts "Building component records..."
    start_time = Time.now
    
    # Determine the root path
    # Since we might be running this outside of Rails, we need to handle the path resolution
    root_path = File.expand_path('..', __dir__)
    demo_path = ENV['DEMO_PATH'] || root_path
    
    # Build the records
    builder = LocoMotion::Algolia::SearchRecordBuilder.new(
      root_path: root_path,
      demo_path: demo_path
    )
    records = builder.build_records
    end_time = Time.now
    processing_time = (end_time - start_time).round(2)
    
    # If we have credentials, upload to Algolia
    if has_credentials
      puts "Uploading #{records.size} components to Algolia..."
      response = index.add_objects(records)
      puts "Indexing complete! Response: #{response}"
    end
    
    # Always write to a JSON file for reference
    timestamp = Time.now.strftime('%Y%m%d%H%M%S')
    tmp_dir = File.join(root_path, 'tmp')
    FileUtils.mkdir_p(tmp_dir) unless Dir.exist?(tmp_dir)
    filename = File.join(tmp_dir, "algolia_data_#{timestamp}.json")
    
    # Create summary data for the file
    summary = {
      metadata: {
        timestamp: Time.now.iso8601,
        total_components: records.size,
        processing_time_seconds: processing_time,
        frameworks: records.group_by { |r| r[:framework] }.transform_values(&:size),
        groups: records.group_by { |r| r[:group] }.transform_values(&:size),
        uploaded_to_algolia: has_credentials
      },
      records: records
    }
    
    # Write the data to a pretty-formatted JSON file
    File.open(filename, 'w') do |file|
      file.write(JSON.pretty_generate(summary))
    end
    
    # Output summary statistics
    puts "Processing complete! File saved to: #{filename}"
    puts "Processing time: #{processing_time} seconds"
    puts "Processed #{records.size} components."
    puts "Components by framework:"
    records.group_by { |r| r[:framework] }.sort_by { |framework, _| framework }.each do |framework, comps|
      puts "  #{framework}: #{comps.size} components"
    end
    
    puts "Components by group:"
    records.group_by { |r| r[:group] }.sort_by { |group, _| group || '' }.each do |group, comps|
      puts "  #{group || 'No Group'}: #{comps.size} components"
    end
    
    puts "\nDone! #{has_credentials ? 'Data uploaded to Algolia and saved locally.' : 'Data saved to JSON file.'}"
    puts "File path: #{filename}"
  end

rescue StandardError => e
  puts "Error: #{e.message}"
  puts e.backtrace.join("\n") if debug
  exit 1
end
