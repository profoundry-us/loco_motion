= doc_title(title: "Countdowns", comp: @comp) do |title|
  %p
    Countdowns display an animated countdown to a specific date.

= doc_note(modifier: :todo, css: "mt-4 max-w-2xl") do
  We should consider allowing a specific date to be passed in as an argument so
  that the countdown can be more accurate.

= doc_example(title: "Basic Countdown", allow_reset: true) do |doc|
  - doc.with_description do
    :markdown
      A basic countdown accepts an ActiveSupport::Duration object as either the
      first positional argument or as the value of the `:duration` keyword
      argument.

  .flex.flex-col.gap-y-4.font-mono
    = daisy_countdown(60.seconds)
    = daisy_countdown(duration: 60.seconds, modifier: :letters)


= doc_example(title: "Longer Countdown", allow_reset: true) do |doc|
  - doc.with_description do
    %p
      If you want to display a countdown with multiple parts, you can build one
      using the
      = link_to "https://api.rubyonrails.org/classes/ActiveSupport/Duration.html", target: "_blank" do
        ActiveSupport::Duration#build
      method.

  .flex.flex-col.items-center.gap-y-4.font-mono
    = daisy_countdown(ActiveSupport::Duration.build(3725))
    = daisy_countdown(ActiveSupport::Duration.build(3725), separator: "-")
    = daisy_countdown(ActiveSupport::Duration.build(3725), modifier: :letters)
    = daisy_countdown(ActiveSupport::Duration.build(3725), modifier: :words)


= doc_example(title: "Boxed Countdown", allow_reset: true) do |doc|
  - doc.with_description do
    :markdown
      You can also display the countdowns in a box by customizing each part of
      the countdown.

      Note that the wrapper `text-sm` class applies to the words ("hours",
      "minutes", and "seconds") and the global `parts_css` sets the size of the
      numbers.

      You can also customize each part individually by using the `days_css`,
      `hours_css`, `minutes_css`, and `seconds_css` options.

      And you can add custom HTML using either the global `parts_html` or the
      individual `days_html`, `hours_html`, `minutes_html`, and `seconds_html`
      options.

  .flex.flex-col.items-center.gap-y-4.text-sm
    - box_css = "where:bg-neutral where:text-neutral-content rounded-box flex flex-col items-center justify-center size-24 font-bold [&_span]:font-mono [&_span]:text-5xl"
    = daisy_countdown(ActiveSupport::Duration.build(3725),
        modifier: :words,
        css: "gap-x-8",
        parts_css: box_css,
        seconds_css: "bg-red-600 text-white",
        seconds_html: { title: "You better hurry!" })
