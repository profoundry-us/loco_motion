= doc_title(title: "Toggles", comp: @comp) do |title|
  %p
    The Toggle component is a wrapper around the
    = component_link("Checkbox", "Daisy::DataInput::CheckboxComponent")
    component that sets the <code>toggle</code> property to <code>true</code> by default, providing a switch-like appearance.


= doc_example(title: "Basic Toggles") do |doc|
  - doc.with_description do
    :markdown
      Toggles are switches that allow users to turn options on or off. They're a visual
      alternative to checkboxes, ideal for settings and preferences.

    = doc_note(css: "mb-8") do
      :markdown
        While the
        <a href="#{doc_url("LocoMotion/Concerns/LabelableComponent")}" target="_blank">LabelableComponent</a>
        Concern does implement a `floating` attribute, it is not relevant
        for toggles and does not render properly.

  .my-2.flex.flex-col.gap-4
    %div
      = daisy_toggle(name: "toggle0", id: "toggle0")
      .tooltip.tooltip-warning{ "data-tip": "CANNOT click the text to activate" }
        Toggle with no label

    = daisy_label(for: "toggle1") do
      = daisy_toggle(name: "toggle1", id: "toggle1")
      Default Toggle with regular label

    = daisy_toggle(name: "toggle_end", id: "toggle_end", checked: true, end: "Toggle using end wrapper")

    = daisy_toggle(name: "toggle_start", id: "toggle_start", checked: true, start: "Toggle using start wrapper")

    = daisy_toggle(name: "toggle_end_block", id: "toggle_end_block", checked: true) do |toggle|
      - toggle.with_end do
        :markdown
          Toggle using `end` block

    = daisy_toggle(name: "toggle_start_block", id: "toggle_start_block", checked: true) do |toggle|
      - toggle.with_start(css: "flex flex-row items-center") do
        Using
        = daisy_badge(css: "mx-1 badge-secondary badge-sm") do
          start
      - toggle.with_end(css: "flex flex-row items-center") do
        and
        = daisy_badge(css: "mx-1 badge-secondary badge-sm") do
          end
        blocks


= doc_example(title: "Toggles with Colors") do |doc|
  - doc.with_description do
    :markdown
      Toggles can be styled with different colors using CSS classes like `toggle-primary`.

  .my-2.flex.flex-col.gap-4
    = daisy_label(for: "toggle-dark") do
      = daisy_toggle(name: "toggle-dark", id: "toggle-dark", css: "toggle-neutral theme-controller", value: "dark", checked: false)
      Enable Dark Mode

    = daisy_label(for: "toggle_primary") do
      = daisy_toggle(name: "toggle_primary", css: "toggle-primary", id: "toggle_primary", checked: true)
      Primary Toggle

    = daisy_label(for: "toggle_secondary") do
      = daisy_toggle(name: "toggle_secondary", css: "toggle-secondary", id: "toggle_secondary", checked: true)
      Secondary Toggle

    = daisy_label(for: "toggle_accent") do
      = daisy_toggle(name: "toggle_accent", css: "toggle-accent", id: "toggle_accent", checked: true)
      Accent Toggle

    = daisy_label(for: "toggle_success") do
      = daisy_toggle(name: "toggle_success", css: "toggle-success", id: "toggle_success", checked: true)
      Success Toggle

    = daisy_label(for: "toggle_warning") do
      = daisy_toggle(name: "toggle_warning", css: "toggle-warning", id: "toggle_warning", checked: true)
      Warning Toggle

    = daisy_label(for: "toggle_error") do
      = daisy_toggle(name: "toggle_error", css: "toggle-error", id: "toggle_error", checked: true)
      Error Toggle


= doc_example(title: "Toggle Sizes") do |doc|
  - doc.with_description do
    :markdown
      Toggles come in different sizes by applying CSS classes.

  .my-2.flex.flex-col.gap-4
    = daisy_label(for: "toggle_small") do
      = daisy_toggle(name: "toggle_small", id: "toggle_small", css: "toggle-sm")
      Small Toggle

    = daisy_label(for: "toggle_default") do
      = daisy_toggle(name: "toggle_default", id: "toggle_default")
      Default Size Toggle

    = daisy_label(for: "toggle_large") do
      = daisy_toggle(name: "toggle_large", id: "toggle_large", css: "toggle-lg")
      Large Toggle


= doc_example(title: "Toggle States") do |doc|
  - doc.with_description do
    :markdown
      Toggles can be in different states such as checked, disabled, or required.

  .my-2.flex.flex-col.gap-4
    = daisy_label(for: "toggle_unchecked") do
      = daisy_toggle(name: "toggle_unchecked", id: "toggle_unchecked")
      Unchecked Toggle

    = daisy_label(for: "toggle_checked") do
      = daisy_toggle(name: "toggle_checked", id: "toggle_checked", checked: true)
      Checked Toggle

    = daisy_label(for: "toggle_disabled", css: "cursor-not-allowed") do
      = daisy_toggle(name: "toggle_disabled", id: "toggle_disabled", disabled: true)
      Disabled Toggle

    = daisy_label(for: "toggle_required") do
      = daisy_toggle(name: "toggle_required", id: "toggle_required", required: true)
      Required Toggle


= doc_example(title: "Custom ID") do |doc|
  - doc.with_description do
    :markdown
      Toggles can be given a custom ID using the `id` attribute.

  .my-2.flex.flex-col.gap-4
    = daisy_label(for: "custom-toggle-id") do
      = daisy_toggle(name: "toggle_custom", id: "custom-toggle-id")
      Toggle with Custom ID


= doc_example(title: "Rails Form Example") do |doc|
  - doc.with_description do
    :markdown
      The built-in Form Builder extension provides an even easier way to use
      toggles in your pages by extracting the name and ID attributes from the
      form object and attributes.

  = form_with(url: "#", method: :post, scope: :user) do |form|
    .flex.flex-col.gap-4
      = form.daisy_label(:notifications) do
        = form.daisy_toggle(:notifications)
        Enable notifications

      = form.daisy_label(:dark_mode) do
        = form.daisy_toggle(:dark_mode, css: "toggle-primary theme-controller", value: "dark")
        Enable dark mode


= doc_example(title: "Using Label Component") do |doc|
  - doc.with_description do
    :markdown
      You can also use the Label component directly with toggles for a fully
      custom approach.

  .my-2.flex.flex-col.gap-4.w-80
    .flex.items-center.justify-between
      = daisy_label(for: "location", title: "Enable location services")
      = daisy_toggle(name: "location", id: "location")

    .flex.items-center.justify-between
      = daisy_label(for: "marketing") do
        Receive marketing emails
      = daisy_toggle(name: "marketing", id: "marketing", css: "toggle-primary")
